---
layout: post
title:  "Python"
date:   2019-05-05 17:32:33 +0800
categories: jekyll update
---



提示：本文以 Python3 为基础，适合有一定基础的学员用于复习之用

如需学习基础知识，推荐书籍《Python编程 从入门到实践》- [美] Eric Matthes 著

如有错误，请不吝赐教，感谢！



### 编码类型

如需要，可在 Python 文件开头加入下行代码（utf-8 为需要的编码类型）

```Python
# -*- coding:utf-8 -*-
```



### Windows 下使用 Python 进行交互式编程

1. 进行 Windows 命令行

   ```
   Windows键 + R
   ```

2. 输入 Python 命令启动 Python 解释器

   ```CMD
   Python
   ```

   > 问题：输入 Python 命令没有出现相应版本信息
   >
   > 原因：环境变量未配置
   >
   > 解决方法：
   >
   > ```
   > 右键“计算机”-“属性”-“高级系统设置”-“高级”-“环境变量”-编辑”系统变量“中的 Path
   > 在其未尾增加 python 路径，与之前原有的路径用英文的分号隔开
   > ```

3. 在 Python 提示符后输入语句，按回车即可执行，例：执行输出"Hello Python World!"语句

   ```Python
   >>> print("Hello Python World!")
   ```



### Linux 下使用 Python 进行交互式编程

1. 打开 Linux 终端

2. 输入 Python 命令启动 Python 解释器

   ```
   Python
   ```

3. 在 Python 提示符后输入语句，按回车即可执行，例：执行输出"Hello Python World!"语句

   ```Python
   >>> print("Hello Python World!")
   ```



### 使用 Python 进行脚本式编程

1. 创建 Python 文件

   > 文件命名规范
   >
   > ```
   > 1. 不要使用中文命名文件
   > 2. 文件命名要有意义
   > 3. 文件后缀建议使用 .py 和 .pyw(纯图形界面程序)
   > ```

2. 代码书写格式

   Python 使用缩进规则来编写代码，例：判断

   ```Python
   if True:
       print('true')
   else:
       print('false')
   ```

3. Python 保留关键字（在交互式编程界面输入以下命令可进行查看）

   ```Python
   >>> import keyword
   >>> keyword.kwlist
   ```

   >'False', 'None', 'True', 'and', 'as'
   >
   >'assert', 'break', 'class', 'continue', 'def'
   >
   >'del', 'elif', 'else', 'except', 'finally'
   >
   >'for', 'from', 'global', 'if', 'import'
   >
   >'in', 'is', 'lambda', 'nonlocal', 'not'
   >
   >'or', 'pass', 'raise', 'return', 'try'
   >
   >'while', 'with', 'yield'
   >
   >> 提示：以上保留字不可作为变量名，否则程序报错

4. 注释

   ```Python
   # 这是单选注释
   """
   这是块注释（被这三对双引号包含的编译器将不去理会）
   """
   '''
   这也是块注释(三个英文状态下的引号)
   '''
   ```

5. 输入（input）

   ```Python
   get_input = input('请输入内容：')
   print('这里是你输入的内容',get_input)
   ```

6. 输出（print）

   ```Python
   print('这里填写输出内容，默认输出完换行')
   print('这将展示输出不换行',end='')
   print('这一行将与上一行出现在同一行上')
   ```

7. 导入模块

   ```Python
   # import 模块名称
   import sys
   # from 模块名称 import 方法
   from sys import platfrom
   ```

8. Python 之禅（在交互式编程界面输入以下命令可进行查看）

   ```Python
   >>> import this
   ```



### 顺序结构

```Python
# 下面所示即所谓的顺序结构
print('我第一个执行')
print('我第二个执行')
print('我第三个执行')
```



### 选择结构

```Python
# 条件表达式为是否执行这个分支的条件，True 表示执行，False 表示不执行

# 单分支选择结构
a = 1
# a == 1 为判定的条件表达式
if a == 1:
    print('我被执行了')
    print('我也被执行了')

# 双分支选择结构
a = 2
# a == 1 为判定的条件表达式
if a == 1:
    print('我没有被执行')
else:
    print('我被执行了')

# 多分支选择结构（自上而下寻找第一个条件表达式为真的判定）
a = 3
# a == 1 为判定的条件表达式
if a == 1:
    print('我没有被执行')
# a == 2 为判定的条件表达式
elif a == 2:
    print('我没有被执行')
# a == 3 为判定的条件表达式
elif a == 3:
    print('我被执行了')
# 可以理解为其它的条件，可以省略
else:
    print('如果他们都没有被执行，那么就执行我')

# 嵌套
a = 3
if a > 1:
    if a > 2:
        if a == 3:
            print('我被执行了')
        else:
            print('我没有被执行')
    elif a < 1:
        print('我没有被执行')
else:
    print('我没有被执行')
```



### 循环结构

```Python
# 单纯的循环
num = 1
# num < 10 为判定的条件表达式
while num < 10:
    print(num)
    # 总得让循环停下来，所以让
    num = num + 1

# 像 if 语句一样，如果条件表达式判定为 False，则执行 else 分支
num = 1
while num == 2:
    print('不会执行到我')
else:
    print('我被执行了')

# 另一种循环结构(可以方便的输出列表里所有的值)
list_for = [1, 2, 3, 4, 5]
for i in list_for:
    print(i)

# 带 else 的 for 语句
for i in list_for:
    print(i)
else:
    print("我也被执行了")
```



### 用于填充格式的语句

```Python
pass
# 例：	# 这将没有任何输出
if True:
    pass
```



### 用于控制流程的语句

```Python
# break 直接跳出循环
# 例（这将没有任何输出）：
while True:
    break
    print('我不会被执行')

# continue 结束当前这一次循环，直接跳到下一次循环
# 例（这将不会输出 2）：
a = 1
while a < 3:
    if a == 2:
        continue
    print(a)
```



### 自定义函数

```Python
# 函数的定义
# def 函数名(参数1 = 默认值（可省略）,参数2 = 默认值):
    """
    帮助信息
    """
    # 需要执行的代码
    # return 返回值（这条语句可省略）
# 例：
def fun_test(par1, par2=2):
    """
    :param par1: 参数1，需要为整形
    :param par2: 参数2，需要为整形
    :return: 返回两数相加的结果
    """
    return par1 + par2

# 函数的调用
# 如函数参数有默认值，若不传递参数，则使用默认值，若没有默认值，则需要将参数传递过去，不然当执行函数时有可能会报错），输出为3
result = fun_test(1)
print(result)
# 调用时如不定义变量存储返回值，程序也能运行，输出为3
# 例：
print(fun_test(1))

# 显示帮助信息
# help(函数名，不要后面的那对括号)
# 例：
help(fun_test)
```



### 变量

```Python
# 声明变量，(变量名 = 变量内容)
number = 10
string = '这是变量内容'

# 使用变量，输出为 10
number = 10
print(number)
```



### 变量类型

1. 整型

   ```Python
   # 二进制整形，以 0b 开头，(开头的 ‘0’ 是 '零'，不是 'O')
   0b1010
   
   # 八进制整形，以 0o 开头，开头的 ‘0’ 是 '零'，不是 'O'
   0o12
   
   # 十进制整形
   10
   
   # 十六进制整形，以 0x 开头，开头的 ‘0’ 是 '零'，不是 'O'
   0xa
   
   # 加法运算，输出为20
   print(10 + 10)
   # 减法运算，输出为0
   print(10 - 10)
   # 乘法运算，输出为100
   print(10 * 10)
   # 除法运算，输出为1
   print(10 / 10)
   # 输出结果为 1，原因是整型做除法不保留小数
   print(3 / 2)
   # 如要保留小数可将其中一个参数改为小数，输出为 1.5
   print(3.0 / 2)
   # 乘方运算，输出为10000000000
   print(10 ** 10)
   ```

2. 浮点型

   ```Python
   # 用小数表示 1.11
   1.11
   
   # 用科学计数法表示 111*10 的 -2 次方
   111e-2
   ```

3. 布尔类型

   ```Python
   """
   布尔类型只有 True 和 False 两个值
   """
   
   # 真
   True
   
   # 假
   False
   ```

4. 复数型

   ```Python
   """
   概念：
   我们把形如 z = a + bi （a，b均为实数）的数称为复数，其中 a 称为实部， b 称为虚部， i 称为虚数单位。当虚部等于零时，这个复数可以视为实数；当z的虚部不等于零时，实部等于零时，常称 z 为纯虚数。复数域是实数域的代数闭包，也即任何复系数多项式在复数域中总有根 —— 概念来自[百度百科]（https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0/254365?fr=aladdin）
   """
   1 + 1i
   ```

5. 字符串类型

   ```Python
   # 单引号表示字符串，其中不能包含单引号或双引号
   string = '这里是声明的字符串'
   
   # 双引号表示字符串，其中不能包含双引号
   string = "这里是声明的字符串"
   
   # 三引号表示字符串，即可包含单引号，也可包含又引号
   string = '''这里是声明的字符串'''
   # 或者
   string = """这里是声明的字符串"""
   
   string = 'This is test'
   # 以标题的形式显示字符串，输出为This Is Test
   print(string.title())
   # 以全大写的形式显示字符串，输出为THIS IS TEST
   print(string.upper())
   # 以全小写的形式显示字符串，输出为this is test
   print(string.lower())
   # 拼接字符串，输出为This is test 我是拼接的内容
   print(string + " 我是拼接的内容")
   
   # 字符串内容换行显示，输出为this is 
   # test
   print('this is \n test')
   # 字符串内容缩进显示，输出为	this is test
   print('\tthis is test')
   
   string = ' test '
   # 删除字符串左边空白，输出为test 
   print(string.lstrip())
   # 删除字符串右边空白，输出为 test
   print(string.rstrip())
   # 删除字符串左右两边空白，输出为test
   print(string.strip())
   ```

6. 列表类型

   ```Python
   """
   列表的下标从 0 开始
   """
   # list0 的下标为 0，list2 的下标为 2 或 -1
   list = ['list0','list1','list2']
   # 显示列表的长度，输出为3
   print(len(list))
   # 调用 list 中的第一个元素，输出为list0
   print(list[0])
   # 调用 list 中的最后一个元素，输出为list2
   print(list[-1])
   # 输出列表，输出为['list0','list1','list2']
   print(list)
   # 修改列表元素，输出为['list0','list','list2']
   list[1] = 'list'
   print(list)
   # 在列表未尾新增列表元素，输出为['list0','list','list2','list3']
   list.append('list3')
   print(list)
   # 在任一下标位置新增列表元素，输出为['list0','list1','list','list2','list3']
   list.insert(1,'list1')
   # 删除任一下标位置列表元素，输出为['list0','list1','list2','list3']
   del list[2]
   print(list)
   # 删除任一下标位置列表元素，并将删除的值赋给变量 recycle，输出为['list0','list1','list2']
   recycle = list.pop(3)
   print(list)
   # 根据列表中元素的值删除列表元素，只删除下标最小的一个，输出为['list0','list1']
   list.remove('list2')
   print(list)
   
   # list0 的下标为 0，list2 的下标为 2 或 -1
   list = ['list1','list0','list2']
   # 对列表中的元素按字母顺序进行排序，输出为['list0','list1','list2']
   list.sort()
   print(list)
   # 对列表中的元素按字母逆序进行排序，输出为['list2', 'list1', 'list0']
   list.sort(reverse=True)
   print(list)
   # 对列表中的元素进行顺序输出，不对列表元素进行操作，输出为['list0','list1','list2']
   print(sorted(list))
   # 对列表中的元素进行逆序输出，不对列表元素进行操作，输出为['list2', 'list1', 'list0']
   print(sorted(list,reverse=True))
   # 将列表中的元素按其自身顺序逆序排序，输出为['list0','list1','list2']
   list.reverse()
   print(list)
   # 显示列表中的一部分连续元素，输出为['list1','list2']
   print(list[1:2])
   # 省略第一个参数，将默认第一参数为第一个元素的下标，输出为['list','list1','list2']
   print(list[:2])
   # 省略第二个参数，将默认第二参数为最后一个元素的下标，输出为['list1','list2']
   print(list[1:])
   # 复制列表，如使用 list_cpoy = lsit,则两者其实是指向同一列表，修改其中一个，另一个也会发生变化
   list_copy = list[:]
   ```

1. 元组类型

   ```Python
   # 定义一个元组
   tuple = (1, 2, 3, 4, 5)
   # 打印元组，输出为(1, 2, 3, 4, 5)
   print(tuple)
   # 你无法为元组中的一个变量进行赋值，这将产生一个错误，例如
   tuple[0] = 0
   # 你可以修改整个元组，输出为(6 ,7 ,8, 9, 10)
   tuple = (6 ,7 ,8, 9, 10)
   ```

2. 字典类型

   ```Python
   # 定义一个字典（格式为 键:值 ，字典里面的值可以是字符串，也可以是数字）
   dictionary = {'dictionary1':'我是第一个值', 'dictionary2':'我是第二个值', 'dictionary_count':3}
   # 打印字典，输出为{'dictionary1': '我是第一个值', 'dictionary2': '我是第二个值', 'dictionary_count': 3}
   print(dictionary)
   # 打印字典中某个键的值，输出为我是第一个值
   print(dictionary['dictionary1'])
   # 添加键值对，输出为{'dictionary1': '我是第一个值', 'dictionary2': '我是第二个值', 'dictionary_count': 3, 'dictionary3': '我是第三个值'}
   dictionary['dictionary3'] = '我是第三个值'
   print(dictionary)
   # 修改字典中 键 对应的 值，输出为4
   dictionary['dictionary_count'] = 4
   print(dictionary['dictionary_count'])
   # 删除键值对，输出为{'dictionary1': '我是第一个值', 'dictionary2': '我是第二个值', 'dictionary_count': 4}
   del dictionary['dictionary3']
   print(dictionary)
   # 顺序输出字典里的键值对，输出为['dictionary1': '我是第一个值', 'dictionary2': '我是第二个值', 'dictionary_count': 4]
   print(sorted(dictionary))
   # 逆序输出字典里的键值对，输出为['dictionary_count': 4, 'dictionary2': '我是第二个值', 'dictionary1': '我是第一个值']
   print(sorted(dictionary, reverse=True))
   ```

3. 集合类型

   ```Python
   # 声明集合
   setlist = set('abcdefg')
   # 打印集合，输出为{'b', 'c', 'e', 'g', 'f', 'a', 'd'}
   print(setlist)
   
   # 声明集合
   setlist = set(('set1', 'set2', 'set3', 'set4', 'set5'))
   # 打印集合，输出为{'set3', 'set2', 'set1', 'set4', 'set5'}
   print(setlist)
   
   # 向集合中添加元素，输出为{'set3', 'set2', 'set1', 'set4', 'set5', 'set6'}
   setlist.add('set6')
   print(setlist)
   
   # 顺序打印集合中的元素，输出为['set1', 'set2', 'set3', 'set4', 'set5', 'set6']
   print(sorted(setlist))
   # 逆序打印集体中的元素，输出为['set6', 'set5', 'set4', 'set3', 'set2', 'set1']
   print(sorted(setlist, reverse=True))
   ```

